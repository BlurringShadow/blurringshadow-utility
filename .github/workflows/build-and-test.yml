name: Build-and-Test

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  job:
    name: ${{ matrix.os }} ${{ matrix.build-type }} build
    runs-on: ${{ matrix.os }}
    continue-on-error: false

    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-22.04, windows-latest]
        build-type: [Debug, Release]
        coverage-file-path: [.build/tests/stdsharpTestsCoverage.lcov]
        include:
          - os: ubuntu-22.04
            llvm-ver: 15
            linux-cmake-options: -DVCPKG_TARGET_TRIPLET=x64-linux-clang -DVCPKG_HOST_TRIPLET=x64-linux-clang -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE="./cmake/vcpkg/toolchains/linux-clang.cmake"
            linux-before-cmake-build: cp ./cmake/vcpkg/triplets/x64-linux-clang.cmake .vcpkg/triplets/community
          - os: ubuntu-22.04
            build-type: Debug
            linux-debug-cmake-options: -DENABLE_CODE_COVERAGE=true -DENABLE_CLANG_TIDY=true

    steps:
      - uses: actions/checkout@v2

      - name: Specify Clang toolchain on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update;
          curl -s https://apt.llvm.org/llvm.sh | sudo bash -s ${{ matrix.llvm-ver }};
          sudo apt install clang-tidy-${{ matrix.llvm-ver }}  libc++-${{ matrix.llvm-ver }}-dev libc++abi-${{ matrix.llvm-ver }}-dev;
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${{ matrix.llvm-ver }} 1000;
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${{ matrix.llvm-ver }} 1000;
          sudo update-alternatives --install /usr/bin/c c /usr/bin/clang-${{ matrix.llvm-ver }} 1000;
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-${{ matrix.llvm-ver }} 1000;
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-${{ matrix.llvm-ver }} 1000;
          sudo update-alternatives --install /usr/bin/llvm-cov llvm-cov /usr/bin/llvm-cov-${{ matrix.llvm-ver }} 1000;
          sudo update-alternatives --install /usr/bin/llvm-profdata llvm-profdata /usr/bin/llvm-profdata-${{ matrix.llvm-ver }} 1000;
          sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/ld.lld-${{ matrix.llvm-ver }} 1000;

      - name: Upgrade MSVC on Windows
        if: ${{ runner.os == 'Windows' }}
        working-directory: C:\Program Files (x86)\Microsoft Visual Studio\Installer
        run: .\setup.exe update --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --installPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise" -q --norestart --installWhileDownloading
        shell: pwsh

      - name: CMake build and test
        uses: ./.github/actions
        with:
          build-type: ${{ matrix.build-type }}
          config-option: ${{ matrix.linux-cmake-options }} ${{ matrix.linux-debug-cmake-options }}
          before-build : ${{ matrix.linux-before-cmake-build }}

      - name: Check coverage file existence
        id: check_coverage_file
        uses: andstor/file-existence-action@v1
        with:
          files: ${{ matrix.coverage-file-path }}

      - name: Codacy Coverage Reporter
        if: steps.check_coverage_file.outputs.files_exists == 'true'
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ${{ matrix.coverage-file-path }}

      - name: Codacy Analysis
        if: steps.check_coverage_file.outputs.files_exists == 'true'
        uses: codacy/codacy-analysis-cli-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          upload: true
          run-docker-tools: false
          clang-tidy-output: ".build/cmake-build.log"
