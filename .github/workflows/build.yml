name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  job:
    name: ${{ matrix.os }} build
    runs-on: ${{ matrix.os }}
    env:
      NINJA_VER: 1.10.2
      CMAKE_BUILD_DIR: build/
      VCPKG_ROOT: vcpkg
      VCPKG_ID: "01d6f6ff1e5332b926099f0c23bda996940ad4e8"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2022]
        include:
          - os: ubuntu-latest
            llvm_ver: 14
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Restore ninja.
        uses: actions/cache@v2
        id: setup-ninja
        with:
          path: ${{ github.workspace }}/.ninja
          key: ${{ env.NINJA_VER }}

      - uses: seanmiddleditch/gha-setup-ninja@master
        with:
          version: ${{ env.NINJA_VER }}
          destination: ${{ github.workspace }}/.ninja

      - name: Set up Clang
        if: ${{ runner.os == 'Linux' }}
        uses: egor-tensin/setup-clang@v1
        with:
          version: ${{ matrix.llvm_ver }}

      - name: Restore artifacts.
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/
          key: |
            ${{ env.VCPKG_ID }}-${{ hashFiles( 'vcpkg.json' ) }}

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_ID }}

      - uses: ilammy/msvc-dev-cmd@v1
        if: ${{ runner.os == 'Windows' }}

      - name: Install dependencies and generate project files
        run: |
          cmake -S "${{ github.workspace }}" -B "${{ env.CMAKE_BUILD_DIR }}" -G Ninja -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"

      - name: Build
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}"

      - name: Run test
        run: |
          cd ${{ env.CMAKE_BUILD_DIR }}
          set CTEST_OUTPUT_ON_FAILURE=1
          ctest -C Debug
